import sys
import copy
import random
instructions = open("nineteen-in.txt").read()
instructions = instructions.split(",")

class Intputer(object):
	(NULL, ADD, MUL, INPUT, OUTPUT, JTR, JFAL, LT, EQ, REL) = range(10)
	WIDTHS = {ADD: 4, MUL: 4, INPUT: 2, OUTPUT: 2, JTR: 3, JFAL: 3, LT: 4, EQ: 4, REL: 2}
	TERM = 99

	def __init__(self, instructions, inputs=[], id=""):
		self.program = list(map(int, instructions))
		self.saved_pc = 0
		self.saved_ram = copy.copy(self.program)
		self.saved_ram += [0] * 100000
		self.inputs = inputs
		self.last_output = None
		self.id = id
		self.relative_base = 0
		self.halted = False

	def get_a(self, modes, ram, pc):
		if modes[0] == 0:
			return ram[ram[pc+1]]
		elif modes[0] == 1:
			return ram[pc+1]
		elif modes[0] == 2:
			return ram[ram[pc+1]+self.relative_base]

	def get_a_addr(self, modes, ram, pc):
		if modes[0] == 0:
			return ram[pc+1]
		elif modes[0] == 1:
			# print("ERROR, INVALID IMMEDIATE MODE")
			return ram[pc+1]
		elif modes[0] == 2:
			return ram[pc+1]+self.relative_base

	def get_b(self, modes, ram, pc):
		# B is undefined, short circuit
		if len(modes) < 2: return None

		if modes[1] == 0:
			return ram[ram[pc+2]]
		elif modes[1] == 1:
			return ram[pc+2]
		elif modes[1] == 2:
			return ram[ram[pc+2]+self.relative_base]

	def get_c_addr(self, modes, ram, pc):
		# C is undefined, short circuit
		if len(modes) < 3: return None
		if modes[2] == 0:
			return ram[pc+3]
		elif modes[2] == 1:
			# print("ERROR, INVALID IMMEDIATE MODE")
			return ram[pc+3]
		elif modes[2] == 2:
			return ram[pc+3]+self.relative_base

	def out(self, *items):
		msg = ' '.join(map(str, items))
		if False:
			print(msg)

	def run(self):
		ram = self.saved_ram
		pc = self.saved_pc
		if self.saved_pc == -1:
			print("ERROR")
			return None, -1
		while ram[pc] != self.TERM:
			opcode, modes = self.process_instruction(ram[pc])
			width = self.WIDTHS[opcode]
			a=self.get_a(modes, ram, pc)
			a_addr=self.get_a_addr(modes, ram, pc)
			b=self.get_b(modes, ram, pc)
			c_addr=self.get_c_addr(modes, ram, pc)
			self.out(ram[pc], ram[pc+1:pc+width])
			if opcode == self.ADD:
				self.out("ADD modes a b out", modes, a, b, a+b, "to", c_addr)
				ram[c_addr] = a + b
			elif opcode == self.MUL:
				self.out("MUL modes a b out", modes, a, b, a*b, "to", c_addr)
				ram[c_addr] = a * b
			elif opcode == self.INPUT:
				self.out("INPUT", modes, "to", a_addr)
				if self.inputs:
					in_val = self.inputs[0]
					self.inputs = self.inputs[1:]
					ram[a_addr] = in_val
				else:
					self.saved_pc = pc
					self.saved_ram = ram
					return self.INPUT, None

			elif opcode == self.OUTPUT:
				self.out("OUTPUT", modes, a)
				self.saved_pc = pc + self.WIDTHS[opcode]
				self.saved_ram = ram
				self.last_output = a
				return self.OUTPUT, self.last_output

			elif opcode == self.JTR:
				self.out("JTR", modes, a, "to", b)
				if a != 0: 
					pc = b
					continue # needed because else pc gets incremented below
			elif opcode == self.JFAL:
				self.out("JFAL", modes, a, "to", b)
				if a == 0:
					pc = b
					continue # needed because else pc gets incremented below
			elif opcode == self.LT:
				self.out("LT", modes, a, b)
				if a < b: 
					ram[c_addr] = 1
				else: 
					ram[c_addr] = 0
			elif opcode == self.EQ:
				self.out("EQ", modes, a, b)
				if a == b: 
					ram[c_addr] = 1
				else:
					ram[c_addr] = 0
			elif opcode == self.REL:
				self.out("REL", modes, a)
				self.relative_base += a
			elif opcode == self.NULL:
				print("ERROR: NULL INSTRUCTION")
			else: 
				print("ERROR: GARBAGE INSTRUCTION")
			pc += self.WIDTHS[opcode]

		self.saved_pc = -1
		self.saved_ram = ram
		self.halted = True
		return self.TERM, None

	def process_instruction(self, inst):
		opcode = int(str(inst)[-2:])
		modes = []
		for c in str(inst)[-3::-1]:
			modes.append(int(c))
		while len(modes) < self.WIDTHS[opcode] - 1:
			modes.append(0)
		return opcode, modes

class TractorDroid(object):

	def __init__(self, inputs):
		self.puter = Intputer(instructions, inputs, id='a')
		self.outputs = []

	def inputs(self):
		inputs = []
		return inputs			

	def run(self):
		for i in range(10000):
			code, out = self.puter.run()
			if code == Intputer.OUTPUT:
				print("OUTPUT", out)
				self.outputs.append(out)
			elif code == Intputer.INPUT: 
				next_ip = raw_input()
				print("INPUT", next_ip)
				break
			else:
				# print("foo")
				break
		return self.outputs

def get(x, y):
	td=TractorDroid([x, y])
	return td.run()[0]

def fast_get(x, y):
	y1, y2 = x_ranges.get(x, (0,0))
	return y1 <= y <= y2


def get_ranges():
	x_ranges = {}
	start = 0
	end = 0
	for x in range(50,1000):
		for y in range(start, 2000):
			if get(x, y) == 1:
				start = y
				break
		for y in range(max(start, end), 2000):
			if get(x, y) == 0:
				end = y - 1
				break
		x_ranges[x] = (start, end)
	return x_ranges

# x_ranges = get_ranges()
x_ranges = {50: (84, 110), 51: (86, 113), 52: (87, 115), 53: (89, 117), 54: (91, 119), 55: (92, 121), 56: (94, 124), 57: (96, 126), 58: (97, 128), 59: (99, 130), 60: (101, 133), 61: (102, 135), 62: (104, 137), 63: (106, 139), 64: (107, 141), 65: (109, 144), 66: (111, 146), 67: (112, 148), 68: (114, 150), 69: (116, 152), 70: (117, 155), 71: (119, 157), 72: (121, 159), 73: (122, 161), 74: (124, 164), 75: (126, 166), 76: (128, 168), 77: (129, 170), 78: (131, 172), 79: (133, 175), 80: (134, 177), 81: (136, 179), 82: (138, 181), 83: (139, 183), 84: (141, 186), 85: (143, 188), 86: (144, 190), 87: (146, 192), 88: (148, 195), 89: (149, 197), 90: (151, 199), 91: (153, 201), 92: (154, 203), 93: (156, 206), 94: (158, 208), 95: (159, 210), 96: (161, 212), 97: (163, 215), 98: (164, 217), 99: (166, 219), 100: (168, 221), 101: (169, 223), 102: (171, 226), 103: (173, 228), 104: (174, 230), 105: (176, 232), 106: (178, 234), 107: (179, 237), 108: (181, 239), 109: (183, 241), 110: (184, 243), 111: (186, 246), 112: (188, 248), 113: (189, 250), 114: (191, 252), 115: (193, 254), 116: (194, 257), 117: (196, 259), 118: (198, 261), 119: (199, 263), 120: (201, 266), 121: (203, 268), 122: (204, 270), 123: (206, 272), 124: (208, 274), 125: (209, 277), 126: (211, 279), 127: (213, 281), 128: (214, 283), 129: (216, 285), 130: (218, 288), 131: (219, 290), 132: (221, 292), 133: (223, 294), 134: (224, 297), 135: (226, 299), 136: (228, 301), 137: (229, 303), 138: (231, 305), 139: (233, 308), 140: (234, 310), 141: (236, 312), 142: (238, 314), 143: (239, 316), 144: (241, 319), 145: (243, 321), 146: (244, 323), 147: (246, 325), 148: (248, 328), 149: (250, 330), 150: (251, 332), 151: (253, 334), 152: (255, 336), 153: (256, 339), 154: (258, 341), 155: (260, 343), 156: (261, 345), 157: (263, 348), 158: (265, 350), 159: (266, 352), 160: (268, 354), 161: (270, 356), 162: (271, 359), 163: (273, 361), 164: (275, 363), 165: (276, 365), 166: (278, 367), 167: (280, 370), 168: (281, 372), 169: (283, 374), 170: (285, 376), 171: (286, 379), 172: (288, 381), 173: (290, 383), 174: (291, 385), 175: (293, 387), 176: (295, 390), 177: (296, 392), 178: (298, 394), 179: (300, 396), 180: (301, 399), 181: (303, 401), 182: (305, 403), 183: (306, 405), 184: (308, 407), 185: (310, 410), 186: (311, 412), 187: (313, 414), 188: (315, 416), 189: (316, 418), 190: (318, 421), 191: (320, 423), 192: (321, 425), 193: (323, 427), 194: (325, 430), 195: (326, 432), 196: (328, 434), 197: (330, 436), 198: (331, 438), 199: (333, 441), 200: (335, 443), 201: (336, 445), 202: (338, 447), 203: (340, 449), 204: (341, 452), 205: (343, 454), 206: (345, 456), 207: (346, 458), 208: (348, 461), 209: (350, 463), 210: (351, 465), 211: (353, 467), 212: (355, 469), 213: (356, 472), 214: (358, 474), 215: (360, 476), 216: (361, 478), 217: (363, 481), 218: (365, 483), 219: (366, 485), 220: (368, 487), 221: (370, 489), 222: (372, 492), 223: (373, 494), 224: (375, 496), 225: (377, 498), 226: (378, 500), 227: (380, 503), 228: (382, 505), 229: (383, 507), 230: (385, 509), 231: (387, 512), 232: (388, 514), 233: (390, 516), 234: (392, 518), 235: (393, 520), 236: (395, 523), 237: (397, 525), 238: (398, 527), 239: (400, 529), 240: (402, 532), 241: (403, 534), 242: (405, 536), 243: (407, 538), 244: (408, 540), 245: (410, 543), 246: (412, 545), 247: (413, 547), 248: (415, 549), 249: (417, 551), 250: (418, 554), 251: (420, 556), 252: (422, 558), 253: (423, 560), 254: (425, 563), 255: (427, 565), 256: (428, 567), 257: (430, 569), 258: (432, 571), 259: (433, 574), 260: (435, 576), 261: (437, 578), 262: (438, 580), 263: (440, 582), 264: (442, 585), 265: (443, 587), 266: (445, 589), 267: (447, 591), 268: (448, 594), 269: (450, 596), 270: (452, 598), 271: (453, 600), 272: (455, 602), 273: (457, 605), 274: (458, 607), 275: (460, 609), 276: (462, 611), 277: (463, 614), 278: (465, 616), 279: (467, 618), 280: (468, 620), 281: (470, 622), 282: (472, 625), 283: (473, 627), 284: (475, 629), 285: (477, 631), 286: (478, 633), 287: (480, 636), 288: (482, 638), 289: (483, 640), 290: (485, 642), 291: (487, 645), 292: (488, 647), 293: (490, 649), 294: (492, 651), 295: (494, 653), 296: (495, 656), 297: (497, 658), 298: (499, 660), 299: (500, 662), 300: (502, 665), 301: (504, 667), 302: (505, 669), 303: (507, 671), 304: (509, 673), 305: (510, 676), 306: (512, 678), 307: (514, 680), 308: (515, 682), 309: (517, 684), 310: (519, 687), 311: (520, 689), 312: (522, 691), 313: (524, 693), 314: (525, 696), 315: (527, 698), 316: (529, 700), 317: (530, 702), 318: (532, 704), 319: (534, 707), 320: (535, 709), 321: (537, 711), 322: (539, 713), 323: (540, 715), 324: (542, 718), 325: (544, 720), 326: (545, 722), 327: (547, 724), 328: (549, 727), 329: (550, 729), 330: (552, 731), 331: (554, 733), 332: (555, 735), 333: (557, 738), 334: (559, 740), 335: (560, 742), 336: (562, 744), 337: (564, 747), 338: (565, 749), 339: (567, 751), 340: (569, 753), 341: (570, 755), 342: (572, 758), 343: (574, 760), 344: (575, 762), 345: (577, 764), 346: (579, 766), 347: (580, 769), 348: (582, 771), 349: (584, 773), 350: (585, 775), 351: (587, 778), 352: (589, 780), 353: (590, 782), 354: (592, 784), 355: (594, 786), 356: (595, 789), 357: (597, 791), 358: (599, 793), 359: (600, 795), 360: (602, 798), 361: (604, 800), 362: (605, 802), 363: (607, 804), 364: (609, 806), 365: (610, 809), 366: (612, 811), 367: (614, 813), 368: (616, 815), 369: (617, 817), 370: (619, 820), 371: (621, 822), 372: (622, 824), 373: (624, 826), 374: (626, 829), 375: (627, 831), 376: (629, 833), 377: (631, 835), 378: (632, 837), 379: (634, 840), 380: (636, 842), 381: (637, 844), 382: (639, 846), 383: (641, 848), 384: (642, 851), 385: (644, 853), 386: (646, 855), 387: (647, 857), 388: (649, 860), 389: (651, 862), 390: (652, 864), 391: (654, 866), 392: (656, 868), 393: (657, 871), 394: (659, 873), 395: (661, 875), 396: (662, 877), 397: (664, 880), 398: (666, 882), 399: (667, 884), 400: (669, 886), 401: (671, 888), 402: (672, 891), 403: (674, 893), 404: (676, 895), 405: (677, 897), 406: (679, 899), 407: (681, 902), 408: (682, 904), 409: (684, 906), 410: (686, 908), 411: (687, 911), 412: (689, 913), 413: (691, 915), 414: (692, 917), 415: (694, 919), 416: (696, 922), 417: (697, 924), 418: (699, 926), 419: (701, 928), 420: (702, 931), 421: (704, 933), 422: (706, 935), 423: (707, 937), 424: (709, 939), 425: (711, 942), 426: (712, 944), 427: (714, 946), 428: (716, 948), 429: (717, 950), 430: (719, 953), 431: (721, 955), 432: (722, 957), 433: (724, 959), 434: (726, 962), 435: (727, 964), 436: (729, 966), 437: (731, 968), 438: (732, 970), 439: (734, 973), 440: (736, 975), 441: (738, 977), 442: (739, 979), 443: (741, 981), 444: (743, 984), 445: (744, 986), 446: (746, 988), 447: (748, 990), 448: (749, 993), 449: (751, 995), 450: (753, 997), 451: (754, 999), 452: (756, 1001), 453: (758, 1004), 454: (759, 1006), 455: (761, 1008), 456: (763, 1010), 457: (764, 1013), 458: (766, 1015), 459: (768, 1017), 460: (769, 1019), 461: (771, 1021), 462: (773, 1024), 463: (774, 1026), 464: (776, 1028), 465: (778, 1030), 466: (779, 1032), 467: (781, 1035), 468: (783, 1037), 469: (784, 1039), 470: (786, 1041), 471: (788, 1044), 472: (789, 1046), 473: (791, 1048), 474: (793, 1050), 475: (794, 1052), 476: (796, 1055), 477: (798, 1057), 478: (799, 1059), 479: (801, 1061), 480: (803, 1064), 481: (804, 1066), 482: (806, 1068), 483: (808, 1070), 484: (809, 1072), 485: (811, 1075), 486: (813, 1077), 487: (814, 1079), 488: (816, 1081), 489: (818, 1083), 490: (819, 1086), 491: (821, 1088), 492: (823, 1090), 493: (824, 1092), 494: (826, 1095), 495: (828, 1097), 496: (829, 1099), 497: (831, 1101), 498: (833, 1103), 499: (834, 1106), 500: (836, 1108), 501: (838, 1110), 502: (839, 1112), 503: (841, 1114), 504: (843, 1117), 505: (844, 1119), 506: (846, 1121), 507: (848, 1123), 508: (849, 1126), 509: (851, 1128), 510: (853, 1130), 511: (854, 1132), 512: (856, 1134), 513: (858, 1137), 514: (860, 1139), 515: (861, 1141), 516: (863, 1143), 517: (865, 1146), 518: (866, 1148), 519: (868, 1150), 520: (870, 1152), 521: (871, 1154), 522: (873, 1157), 523: (875, 1159), 524: (876, 1161), 525: (878, 1163), 526: (880, 1165), 527: (881, 1168), 528: (883, 1170), 529: (885, 1172), 530: (886, 1174), 531: (888, 1177), 532: (890, 1179), 533: (891, 1181), 534: (893, 1183), 535: (895, 1185), 536: (896, 1188), 537: (898, 1190), 538: (900, 1192), 539: (901, 1194), 540: (903, 1197), 541: (905, 1199), 542: (906, 1201), 543: (908, 1203), 544: (910, 1205), 545: (911, 1208), 546: (913, 1210), 547: (915, 1212), 548: (916, 1214), 549: (918, 1216), 550: (920, 1219), 551: (921, 1221), 552: (923, 1223), 553: (925, 1225), 554: (926, 1228), 555: (928, 1230), 556: (930, 1232), 557: (931, 1234), 558: (933, 1236), 559: (935, 1239), 560: (936, 1241), 561: (938, 1243), 562: (940, 1245), 563: (941, 1247), 564: (943, 1250), 565: (945, 1252), 566: (946, 1254), 567: (948, 1256), 568: (950, 1259), 569: (951, 1261), 570: (953, 1263), 571: (955, 1265), 572: (956, 1267), 573: (958, 1270), 574: (960, 1272), 575: (961, 1274), 576: (963, 1276), 577: (965, 1279), 578: (966, 1281), 579: (968, 1283), 580: (970, 1285), 581: (971, 1287), 582: (973, 1290), 583: (975, 1292), 584: (976, 1294), 585: (978, 1296), 586: (980, 1298), 587: (982, 1301), 588: (983, 1303), 589: (985, 1305), 590: (987, 1307), 591: (988, 1310), 592: (990, 1312), 593: (992, 1314), 594: (993, 1316), 595: (995, 1318), 596: (997, 1321), 597: (998, 1323), 598: (1000, 1325), 599: (1002, 1327), 600: (1003, 1330), 601: (1005, 1332), 602: (1007, 1334), 603: (1008, 1336), 604: (1010, 1338), 605: (1012, 1341), 606: (1013, 1343), 607: (1015, 1345), 608: (1017, 1347), 609: (1018, 1349), 610: (1020, 1352), 611: (1022, 1354), 612: (1023, 1356), 613: (1025, 1358), 614: (1027, 1361), 615: (1028, 1363), 616: (1030, 1365), 617: (1032, 1367), 618: (1033, 1369), 619: (1035, 1372), 620: (1037, 1374), 621: (1038, 1376), 622: (1040, 1378), 623: (1042, 1380), 624: (1043, 1383), 625: (1045, 1385), 626: (1047, 1387), 627: (1048, 1389), 628: (1050, 1392), 629: (1052, 1394), 630: (1053, 1396), 631: (1055, 1398), 632: (1057, 1400), 633: (1058, 1403), 634: (1060, 1405), 635: (1062, 1407), 636: (1063, 1409), 637: (1065, 1412), 638: (1067, 1414), 639: (1068, 1416), 640: (1070, 1418), 641: (1072, 1420), 642: (1073, 1423), 643: (1075, 1425), 644: (1077, 1427), 645: (1078, 1429), 646: (1080, 1431), 647: (1082, 1434), 648: (1083, 1436), 649: (1085, 1438), 650: (1087, 1440), 651: (1088, 1443), 652: (1090, 1445), 653: (1092, 1447), 654: (1093, 1449), 655: (1095, 1451), 656: (1097, 1454), 657: (1098, 1456), 658: (1100, 1458), 659: (1102, 1460), 660: (1104, 1463), 661: (1105, 1465), 662: (1107, 1467), 663: (1109, 1469), 664: (1110, 1471), 665: (1112, 1474), 666: (1114, 1476), 667: (1115, 1478), 668: (1117, 1480), 669: (1119, 1482), 670: (1120, 1485), 671: (1122, 1487), 672: (1124, 1489), 673: (1125, 1491), 674: (1127, 1494), 675: (1129, 1496), 676: (1130, 1498), 677: (1132, 1500), 678: (1134, 1502), 679: (1135, 1505), 680: (1137, 1507), 681: (1139, 1509), 682: (1140, 1511), 683: (1142, 1513), 684: (1144, 1516), 685: (1145, 1518), 686: (1147, 1520), 687: (1149, 1522), 688: (1150, 1525), 689: (1152, 1527), 690: (1154, 1529), 691: (1155, 1531), 692: (1157, 1533), 693: (1159, 1536), 694: (1160, 1538), 695: (1162, 1540), 696: (1164, 1542), 697: (1165, 1545), 698: (1167, 1547), 699: (1169, 1549), 700: (1170, 1551), 701: (1172, 1553), 702: (1174, 1556), 703: (1175, 1558), 704: (1177, 1560), 705: (1179, 1562), 706: (1180, 1564), 707: (1182, 1567), 708: (1184, 1569), 709: (1185, 1571), 710: (1187, 1573), 711: (1189, 1576), 712: (1190, 1578), 713: (1192, 1580), 714: (1194, 1582), 715: (1195, 1584), 716: (1197, 1587), 717: (1199, 1589), 718: (1200, 1591), 719: (1202, 1593), 720: (1204, 1596), 721: (1205, 1598), 722: (1207, 1600), 723: (1209, 1602), 724: (1210, 1604), 725: (1212, 1607), 726: (1214, 1609), 727: (1215, 1611), 728: (1217, 1613), 729: (1219, 1615), 730: (1220, 1618), 731: (1222, 1620), 732: (1224, 1622), 733: (1226, 1624), 734: (1227, 1627), 735: (1229, 1629), 736: (1231, 1631), 737: (1232, 1633), 738: (1234, 1635), 739: (1236, 1638), 740: (1237, 1640), 741: (1239, 1642), 742: (1241, 1644), 743: (1242, 1646), 744: (1244, 1649), 745: (1246, 1651), 746: (1247, 1653), 747: (1249, 1655), 748: (1251, 1658), 749: (1252, 1660), 750: (1254, 1662), 751: (1256, 1664), 752: (1257, 1666), 753: (1259, 1669), 754: (1261, 1671), 755: (1262, 1673), 756: (1264, 1675), 757: (1266, 1678), 758: (1267, 1680), 759: (1269, 1682), 760: (1271, 1684), 761: (1272, 1686), 762: (1274, 1689), 763: (1276, 1691), 764: (1277, 1693), 765: (1279, 1695), 766: (1281, 1697), 767: (1282, 1700), 768: (1284, 1702), 769: (1286, 1704), 770: (1287, 1706), 771: (1289, 1709), 772: (1291, 1711), 773: (1292, 1713), 774: (1294, 1715), 775: (1296, 1717), 776: (1297, 1720), 777: (1299, 1722), 778: (1301, 1724), 779: (1302, 1726), 780: (1304, 1729), 781: (1306, 1731), 782: (1307, 1733), 783: (1309, 1735), 784: (1311, 1737), 785: (1312, 1740), 786: (1314, 1742), 787: (1316, 1744), 788: (1317, 1746), 789: (1319, 1748), 790: (1321, 1751), 791: (1322, 1753), 792: (1324, 1755), 793: (1326, 1757), 794: (1327, 1760), 795: (1329, 1762), 796: (1331, 1764), 797: (1332, 1766), 798: (1334, 1768), 799: (1336, 1771), 800: (1337, 1773), 801: (1339, 1775), 802: (1341, 1777), 803: (1342, 1779), 804: (1344, 1782), 805: (1346, 1784), 806: (1348, 1786), 807: (1349, 1788), 808: (1351, 1791), 809: (1353, 1793), 810: (1354, 1795), 811: (1356, 1797), 812: (1358, 1799), 813: (1359, 1802), 814: (1361, 1804), 815: (1363, 1806), 816: (1364, 1808), 817: (1366, 1811), 818: (1368, 1813), 819: (1369, 1815), 820: (1371, 1817), 821: (1373, 1819), 822: (1374, 1822), 823: (1376, 1824), 824: (1378, 1826), 825: (1379, 1828), 826: (1381, 1830), 827: (1383, 1833), 828: (1384, 1835), 829: (1386, 1837), 830: (1388, 1839), 831: (1389, 1842), 832: (1391, 1844), 833: (1393, 1846), 834: (1394, 1848), 835: (1396, 1850), 836: (1398, 1853), 837: (1399, 1855), 838: (1401, 1857), 839: (1403, 1859), 840: (1404, 1862), 841: (1406, 1864), 842: (1408, 1866), 843: (1409, 1868), 844: (1411, 1870), 845: (1413, 1873), 846: (1414, 1875), 847: (1416, 1877), 848: (1418, 1879), 849: (1419, 1881), 850: (1421, 1884), 851: (1423, 1886), 852: (1424, 1888), 853: (1426, 1890), 854: (1428, 1893), 855: (1429, 1895), 856: (1431, 1897), 857: (1433, 1899), 858: (1434, 1901), 859: (1436, 1904), 860: (1438, 1906), 861: (1439, 1908), 862: (1441, 1910), 863: (1443, 1912), 864: (1444, 1915), 865: (1446, 1917), 866: (1448, 1919), 867: (1449, 1921), 868: (1451, 1924), 869: (1453, 1926), 870: (1454, 1928), 871: (1456, 1930), 872: (1458, 1932), 873: (1459, 1935), 874: (1461, 1937), 875: (1463, 1939), 876: (1464, 1941), 877: (1466, 1944), 878: (1468, 1946), 879: (1470, 1948), 880: (1471, 1950), 881: (1473, 1952), 882: (1475, 1955), 883: (1476, 1957), 884: (1478, 1959), 885: (1480, 1961), 886: (1481, 1963), 887: (1483, 1966), 888: (1485, 1968), 889: (1486, 1970), 890: (1488, 1972), 891: (1490, 1975), 892: (1491, 1977), 893: (1493, 1979), 894: (1495, 1981), 895: (1496, 1983), 896: (1498, 1986), 897: (1500, 1988), 898: (1501, 1990), 899: (1503, 1992), 900: (1505, 1995), 901: (1506, 1997), 902: (1508, 1997), 903: (1510, 1997), 904: (1511, 1997), 905: (1513, 1997), 906: (1515, 1997), 907: (1516, 1997), 908: (1518, 1997), 909: (1520, 1997), 910: (1521, 1997), 911: (1523, 1997), 912: (1525, 1997), 913: (1526, 1997), 914: (1528, 1997), 915: (1530, 1997), 916: (1531, 1997), 917: (1533, 1997), 918: (1535, 1997), 919: (1536, 1997), 920: (1538, 1997), 921: (1540, 1997), 922: (1541, 1997), 923: (1543, 1997), 924: (1545, 1997), 925: (1546, 1997), 926: (1548, 1997), 927: (1550, 1997), 928: (1551, 1997), 929: (1553, 1997), 930: (1555, 1997), 931: (1556, 1997), 932: (1558, 1997), 933: (1560, 1997), 934: (1561, 1997), 935: (1563, 1997), 936: (1565, 1997), 937: (1566, 1997), 938: (1568, 1997), 939: (1570, 1997), 940: (1571, 1997), 941: (1573, 1997), 942: (1575, 1997), 943: (1576, 1997), 944: (1578, 1997), 945: (1580, 1997), 946: (1581, 1997), 947: (1583, 1997), 948: (1585, 1997), 949: (1586, 1997), 950: (1588, 1997), 951: (1590, 1997), 952: (1592, 1997), 953: (1593, 1997), 954: (1595, 1997), 955: (1597, 1997), 956: (1598, 1997), 957: (1600, 1997), 958: (1602, 1997), 959: (1603, 1997), 960: (1605, 1997), 961: (1607, 1997), 962: (1608, 1997), 963: (1610, 1997), 964: (1612, 1997), 965: (1613, 1997), 966: (1615, 1997), 967: (1617, 1997), 968: (1618, 1997), 969: (1620, 1997), 970: (1622, 1997), 971: (1623, 1997), 972: (1625, 1997), 973: (1627, 1997), 974: (1628, 1997), 975: (1630, 1997), 976: (1632, 1997), 977: (1633, 1997), 978: (1635, 1997), 979: (1637, 1997), 980: (1638, 1997), 981: (1640, 1997), 982: (1642, 1997), 983: (1643, 1997), 984: (1645, 1997), 985: (1647, 1997), 986: (1648, 1997), 987: (1650, 1997), 988: (1652, 1997), 989: (1653, 1997), 990: (1655, 1997), 991: (1657, 1997), 992: (1658, 1997), 993: (1660, 1997), 994: (1662, 1997), 995: (1663, 1997), 996: (1665, 1997), 997: (1667, 1997), 998: (1668, 1997), 999: (1670, 1997)}

# print(x_ranges)
# test fast_get
# for i in range(10000):
# 	x = random.randint(50, 999)
# 	y = random.randint(0, 2000)
# 	if get(x, y) != fast_get(x, y):
# 		print(x, y, end='')
# 		print(get(x, y) == fast_get(x, y))
		

def real_square(x, y):
	return get(x, y) == 1 and get(x+99, y) == 1 and get(x, y+99) == 1


def square(x, y):
	return fast_get(x, y) == 1 and fast_get(x+99, y) == 1 and fast_get(x, y+99) == 1

# for x in range(50, 499):
# 	for y in range(0, 1800):
# 		s = square(x, y)
# 		if s and real_square(x, y): print(x, y)

print(get(1,2))