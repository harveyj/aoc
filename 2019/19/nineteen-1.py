import sys
import copy
import random
instructions = open("nineteen-in.txt").read()
instructions = instructions.split(",")

class Intputer(object):
	(NULL, ADD, MUL, INPUT, OUTPUT, JTR, JFAL, LT, EQ, REL) = range(10)
	WIDTHS = {ADD: 4, MUL: 4, INPUT: 2, OUTPUT: 2, JTR: 3, JFAL: 3, LT: 4, EQ: 4, REL: 2}
	TERM = 99

	def __init__(self, instructions, inputs=[], id=""):
		self.program = list(map(int, instructions))
		self.saved_pc = 0
		self.saved_ram = copy.copy(self.program)
		self.saved_ram += [0] * 100000
		self.inputs = inputs
		self.last_output = None
		self.id = id
		self.relative_base = 0
		self.halted = False

	def get_a(self, modes, ram, pc):
		if modes[0] == 0:
			return ram[ram[pc+1]]
		elif modes[0] == 1:
			return ram[pc+1]
		elif modes[0] == 2:
			return ram[ram[pc+1]+self.relative_base]

	def get_a_addr(self, modes, ram, pc):
		if modes[0] == 0:
			return ram[pc+1]
		elif modes[0] == 1:
			# print("ERROR, INVALID IMMEDIATE MODE")
			return ram[pc+1]
		elif modes[0] == 2:
			return ram[pc+1]+self.relative_base

	def get_b(self, modes, ram, pc):
		# B is undefined, short circuit
		if len(modes) < 2: return None

		if modes[1] == 0:
			return ram[ram[pc+2]]
		elif modes[1] == 1:
			return ram[pc+2]
		elif modes[1] == 2:
			return ram[ram[pc+2]+self.relative_base]

	def get_c_addr(self, modes, ram, pc):
		# C is undefined, short circuit
		if len(modes) < 3: return None
		if modes[2] == 0:
			return ram[pc+3]
		elif modes[2] == 1:
			# print("ERROR, INVALID IMMEDIATE MODE")
			return ram[pc+3]
		elif modes[2] == 2:
			return ram[pc+3]+self.relative_base

	def out(self, *items):
		msg = ' '.join(map(str, items))
		if False:
			print(msg)

	def run(self):
		ram = self.saved_ram
		pc = self.saved_pc
		if self.saved_pc == -1:
			print("ERROR")
			return None, -1
		while ram[pc] != self.TERM:
			opcode, modes = self.process_instruction(ram[pc])
			width = self.WIDTHS[opcode]
			a=self.get_a(modes, ram, pc)
			a_addr=self.get_a_addr(modes, ram, pc)
			b=self.get_b(modes, ram, pc)
			c_addr=self.get_c_addr(modes, ram, pc)
			self.out(ram[pc], ram[pc+1:pc+width])
			if opcode == self.ADD:
				self.out("ADD modes a b out", modes, a, b, a+b, "to", c_addr)
				ram[c_addr] = a + b
			elif opcode == self.MUL:
				self.out("MUL modes a b out", modes, a, b, a*b, "to", c_addr)
				ram[c_addr] = a * b
			elif opcode == self.INPUT:
				self.out("INPUT", modes, "to", a_addr)
				if self.inputs:
					in_val = self.inputs.pop()
					ram[a_addr] = in_val
				else:
					self.saved_pc = pc
					self.saved_ram = ram
					return self.INPUT, None

			elif opcode == self.OUTPUT:
				self.out("OUTPUT", modes, a)
				self.saved_pc = pc + self.WIDTHS[opcode]
				self.saved_ram = ram
				self.last_output = a
				return self.OUTPUT, self.last_output

			elif opcode == self.JTR:
				self.out("JTR", modes, a, "to", b)
				if a != 0: 
					pc = b
					continue # needed because else pc gets incremented below
			elif opcode == self.JFAL:
				self.out("JFAL", modes, a, "to", b)
				if a == 0:
					pc = b
					continue # needed because else pc gets incremented below
			elif opcode == self.LT:
				self.out("LT", modes, a, b)
				if a < b: 
					ram[c_addr] = 1
				else: 
					ram[c_addr] = 0
			elif opcode == self.EQ:
				self.out("EQ", modes, a, b)
				if a == b: 
					ram[c_addr] = 1
				else:
					ram[c_addr] = 0
			elif opcode == self.REL:
				self.out("REL", modes, a)
				self.relative_base += a
			elif opcode == self.NULL:
				print("ERROR: NULL INSTRUCTION")
			else: 
				print("ERROR: GARBAGE INSTRUCTION")
			pc += self.WIDTHS[opcode]

		self.saved_pc = -1
		self.saved_ram = ram
		self.halted = True
		return self.TERM, None

	def process_instruction(self, inst):
		opcode = int(str(inst)[-2:])
		modes = []
		for c in str(inst)[-3::-1]:
			modes.append(int(c))
		while len(modes) < self.WIDTHS[opcode] - 1:
			modes.append(0)
		return opcode, modes

class TractorDroid(object):

	def __init__(self, inputs):
		self.puter = Intputer(instructions, inputs, id='a')
		self.outputs = []

	def inputs(self):
		inputs = []
		return inputs			

	def run(self):
		for i in range(10000):
			code, out = self.puter.run()
			if code == Intputer.OUTPUT:
				# print("OUTPUT", out)
				self.outputs.append(out)
			elif code == Intputer.INPUT: 
				next_ip = raw_input()
				# print("INPUT", next_ip)
				break
			else:
				# print("foo")
				break
		return self.outputs

def get(x, y):
	td=TractorDroid([x, y])
	return td.run()[0]

def fast_get(x, y):
	y1, y2 = x_ranges.get(x)
	return y1 <= y <= y2


def get_ranges():
	x_ranges = {}
	start = 0
	end = 0
	for x in range(50,1000):
		for y in range(start, 2000):
			if get(x, y) == 1:
				start = y
				break
		for y in range(max(start, end), 2000):
			if get(x, y) == 0:
				end = y - 1
				break
		x_ranges[x] = (start, end)
	return x_ranges

# test fast_get
# for i in range(10000):
# 	x = random.randint(50, 599)
# 	y = random.randint(0, 1000)
# 	print(x, y, end='')
# 	print(get(x, y) == fast_get(x, y))
		
# x_ranges = {50: (84, 110), 51: (86, 113), 52: (87, 115), 53: (89, 117), 54: (91, 119), 55: (92, 121), 56: (94, 124), 57: (96, 126), 58: (97, 128), 59: (99, 130), 60: (101, 133), 61: (102, 135), 62: (104, 137), 63: (106, 139), 64: (107, 141), 65: (109, 144), 66: (111, 146), 67: (112, 148), 68: (114, 150), 69: (116, 152), 70: (117, 155), 71: (119, 157), 72: (121, 159), 73: (122, 161), 74: (124, 164), 75: (126, 166), 76: (128, 168), 77: (129, 170), 78: (131, 172), 79: (133, 175), 80: (134, 177), 81: (136, 179), 82: (138, 181), 83: (139, 183), 84: (141, 186), 85: (143, 188), 86: (144, 190), 87: (146, 192), 88: (148, 195), 89: (149, 197), 90: (151, 199), 91: (153, 201), 92: (154, 203), 93: (156, 206), 94: (158, 208), 95: (159, 210), 96: (161, 212), 97: (163, 215), 98: (164, 217), 99: (166, 219), 100: (168, 221), 101: (169, 223), 102: (171, 226), 103: (173, 228), 104: (174, 230), 105: (176, 232), 106: (178, 234), 107: (179, 237), 108: (181, 239), 109: (183, 241), 110: (184, 243), 111: (186, 246), 112: (188, 248), 113: (189, 250), 114: (191, 252), 115: (193, 254), 116: (194, 257), 117: (196, 259), 118: (198, 261), 119: (199, 263), 120: (201, 266), 121: (203, 268), 122: (204, 270), 123: (206, 272), 124: (208, 274), 125: (209, 277), 126: (211, 279), 127: (213, 281), 128: (214, 283), 129: (216, 285), 130: (218, 288), 131: (219, 290), 132: (221, 292), 133: (223, 294), 134: (224, 297), 135: (226, 299), 136: (228, 301), 137: (229, 303), 138: (231, 305), 139: (233, 308), 140: (234, 310), 141: (236, 312), 142: (238, 314), 143: (239, 316), 144: (241, 319), 145: (243, 321), 146: (244, 323), 147: (246, 325), 148: (248, 328), 149: (250, 330), 150: (251, 332), 151: (253, 334), 152: (255, 336), 153: (256, 339), 154: (258, 341), 155: (260, 343), 156: (261, 345), 157: (263, 348), 158: (265, 350), 159: (266, 352), 160: (268, 354), 161: (270, 356), 162: (271, 359), 163: (273, 361), 164: (275, 363), 165: (276, 365), 166: (278, 367), 167: (280, 370), 168: (281, 372), 169: (283, 374), 170: (285, 376), 171: (286, 379), 172: (288, 381), 173: (290, 383), 174: (291, 385), 175: (293, 387), 176: (295, 390), 177: (296, 392), 178: (298, 394), 179: (300, 396), 180: (301, 399), 181: (303, 401), 182: (305, 403), 183: (306, 405), 184: (308, 407), 185: (310, 410), 186: (311, 412), 187: (313, 414), 188: (315, 416), 189: (316, 418), 190: (318, 421), 191: (320, 423), 192: (321, 425), 193: (323, 427), 194: (325, 430), 195: (326, 432), 196: (328, 434), 197: (330, 436), 198: (331, 438), 199: (333, 441), 200: (335, 443), 201: (336, 445), 202: (338, 447), 203: (340, 449), 204: (341, 452), 205: (343, 454), 206: (345, 456), 207: (346, 458), 208: (348, 461), 209: (350, 463), 210: (351, 465), 211: (353, 467), 212: (355, 469), 213: (356, 472), 214: (358, 474), 215: (360, 476), 216: (361, 478), 217: (363, 481), 218: (365, 483), 219: (366, 485), 220: (368, 487), 221: (370, 489), 222: (372, 492), 223: (373, 494), 224: (375, 496), 225: (377, 498), 226: (378, 500), 227: (380, 503), 228: (382, 505), 229: (383, 507), 230: (385, 509), 231: (387, 512), 232: (388, 514), 233: (390, 516), 234: (392, 518), 235: (393, 520), 236: (395, 523), 237: (397, 525), 238: (398, 527), 239: (400, 529), 240: (402, 532), 241: (403, 534), 242: (405, 536), 243: (407, 538), 244: (408, 540), 245: (410, 543), 246: (412, 545), 247: (413, 547), 248: (415, 549), 249: (417, 551), 250: (418, 554), 251: (420, 556), 252: (422, 558), 253: (423, 560), 254: (425, 563), 255: (427, 565), 256: (428, 567), 257: (430, 569), 258: (432, 571), 259: (433, 574), 260: (435, 576), 261: (437, 578), 262: (438, 580), 263: (440, 582), 264: (442, 585), 265: (443, 587), 266: (445, 589), 267: (447, 591), 268: (448, 594), 269: (450, 596), 270: (452, 598), 271: (453, 600), 272: (455, 602), 273: (457, 605), 274: (458, 607), 275: (460, 609), 276: (462, 611), 277: (463, 614), 278: (465, 616), 279: (467, 618), 280: (468, 620), 281: (470, 622), 282: (472, 625), 283: (473, 627), 284: (475, 629), 285: (477, 631), 286: (478, 633), 287: (480, 636), 288: (482, 638), 289: (483, 640), 290: (485, 642), 291: (487, 645), 292: (488, 647), 293: (490, 649), 294: (492, 651), 295: (494, 653), 296: (495, 656), 297: (497, 658), 298: (499, 660), 299: (500, 662), 300: (502, 665), 301: (504, 667), 302: (505, 669), 303: (507, 671), 304: (509, 673), 305: (510, 676), 306: (512, 678), 307: (514, 680), 308: (515, 682), 309: (517, 684), 310: (519, 687), 311: (520, 689), 312: (522, 691), 313: (524, 693), 314: (525, 696), 315: (527, 698), 316: (529, 700), 317: (530, 702), 318: (532, 704), 319: (534, 707), 320: (535, 709), 321: (537, 711), 322: (539, 713), 323: (540, 715), 324: (542, 718), 325: (544, 720), 326: (545, 722), 327: (547, 724), 328: (549, 727), 329: (550, 729), 330: (552, 731), 331: (554, 733), 332: (555, 735), 333: (557, 738), 334: (559, 740), 335: (560, 742), 336: (562, 744), 337: (564, 747), 338: (565, 749), 339: (567, 751), 340: (569, 753), 341: (570, 755), 342: (572, 758), 343: (574, 760), 344: (575, 762), 345: (577, 764), 346: (579, 766), 347: (580, 769), 348: (582, 771), 349: (584, 773), 350: (585, 775), 351: (587, 778), 352: (589, 780), 353: (590, 782), 354: (592, 784), 355: (594, 786), 356: (595, 789), 357: (597, 791), 358: (599, 793), 359: (600, 795), 360: (602, 798), 361: (604, 800), 362: (605, 802), 363: (607, 804), 364: (609, 806), 365: (610, 809), 366: (612, 811), 367: (614, 813), 368: (616, 815), 369: (617, 817), 370: (619, 820), 371: (621, 822), 372: (622, 824), 373: (624, 826), 374: (626, 829), 375: (627, 831), 376: (629, 833), 377: (631, 835), 378: (632, 837), 379: (634, 840), 380: (636, 842), 381: (637, 844), 382: (639, 846), 383: (641, 848), 384: (642, 851), 385: (644, 853), 386: (646, 855), 387: (647, 857), 388: (649, 860), 389: (651, 862), 390: (652, 864), 391: (654, 866), 392: (656, 868), 393: (657, 871), 394: (659, 873), 395: (661, 875), 396: (662, 877), 397: (664, 880), 398: (666, 882), 399: (667, 884), 400: (669, 886), 401: (671, 888), 402: (672, 891), 403: (674, 893), 404: (676, 895), 405: (677, 897), 406: (679, 899), 407: (681, 902), 408: (682, 904), 409: (684, 906), 410: (686, 908), 411: (687, 911), 412: (689, 913), 413: (691, 915), 414: (692, 917), 415: (694, 919), 416: (696, 922), 417: (697, 924), 418: (699, 926), 419: (701, 928), 420: (702, 931), 421: (704, 933), 422: (706, 935), 423: (707, 937), 424: (709, 939), 425: (711, 942), 426: (712, 944), 427: (714, 946), 428: (716, 948), 429: (717, 950), 430: (719, 953), 431: (721, 955), 432: (722, 957), 433: (724, 959), 434: (726, 962), 435: (727, 964), 436: (729, 966), 437: (731, 968), 438: (732, 970), 439: (734, 973), 440: (736, 975), 441: (738, 977), 442: (739, 979), 443: (741, 981), 444: (743, 984), 445: (744, 986), 446: (746, 988), 447: (748, 990), 448: (749, 993), 449: (751, 995), 450: (753, 997), 451: (754, 999), 452: (756, 1001), 453: (758, 1004), 454: (759, 1006), 455: (761, 1008), 456: (763, 1010), 457: (764, 1013), 458: (766, 1015), 459: (768, 1017), 460: (769, 1019), 461: (771, 1021), 462: (773, 1024), 463: (774, 1026), 464: (776, 1028), 465: (778, 1030), 466: (779, 1032), 467: (781, 1035), 468: (783, 1037), 469: (784, 1039), 470: (786, 1041), 471: (788, 1044), 472: (789, 1046), 473: (791, 1048), 474: (793, 1050), 475: (794, 1052), 476: (796, 1055), 477: (798, 1057), 478: (799, 1059), 479: (801, 1061), 480: (803, 1064), 481: (804, 1066), 482: (806, 1068), 483: (808, 1070), 484: (809, 1072), 485: (811, 1075), 486: (813, 1077), 487: (814, 1079), 488: (816, 1081), 489: (818, 1083), 490: (819, 1086), 491: (821, 1088), 492: (823, 1090), 493: (824, 1092), 494: (826, 1095), 495: (828, 1097), 496: (829, 1099), 497: (831, 1101), 498: (833, 1103), 499: (834, 1106), 500: (836, 1108), 501: (838, 1110), 502: (839, 1112), 503: (841, 1114), 504: (843, 1117), 505: (844, 1119), 506: (846, 1121), 507: (848, 1123), 508: (849, 1126), 509: (851, 1128), 510: (853, 1130), 511: (854, 1132), 512: (856, 1134), 513: (858, 1137), 514: (860, 1139), 515: (861, 1141), 516: (863, 1143), 517: (865, 1146), 518: (866, 1148), 519: (868, 1150), 520: (870, 1152), 521: (871, 1154), 522: (873, 1157), 523: (875, 1159), 524: (876, 1161), 525: (878, 1163), 526: (880, 1165), 527: (881, 1168), 528: (883, 1170), 529: (885, 1172), 530: (886, 1174), 531: (888, 1177), 532: (890, 1179), 533: (891, 1181), 534: (893, 1183), 535: (895, 1185), 536: (896, 1188), 537: (898, 1190), 538: (900, 1192), 539: (901, 1194), 540: (903, 1197), 541: (905, 1199), 542: (906, 1201), 543: (908, 1203), 544: (910, 1205), 545: (911, 1208), 546: (913, 1210), 547: (915, 1212), 548: (916, 1214), 549: (918, 1216), 550: (920, 1219), 551: (921, 1221), 552: (923, 1223), 553: (925, 1225), 554: (926, 1228), 555: (928, 1230), 556: (930, 1232), 557: (931, 1234), 558: (933, 1236), 559: (935, 1239), 560: (936, 1241), 561: (938, 1243), 562: (940, 1245), 563: (941, 1247), 564: (943, 1250), 565: (945, 1252), 566: (946, 1254), 567: (948, 1256), 568: (950, 1259), 569: (951, 1261), 570: (953, 1263), 571: (955, 1265), 572: (956, 1267), 573: (958, 1270), 574: (960, 1272), 575: (961, 1274), 576: (963, 1276), 577: (965, 1279), 578: (966, 1281), 579: (968, 1283), 580: (970, 1285), 581: (971, 1287), 582: (973, 1290), 583: (975, 1292), 584: (976, 1294), 585: (978, 1296), 586: (980, 1298), 587: (982, 1301), 588: (983, 1303), 589: (985, 1305), 590: (987, 1307), 591: (988, 1310), 592: (990, 1312), 593: (992, 1314), 594: (993, 1316), 595: (995, 1318), 596: (997, 1321), 597: (998, 1323), 598: (1000, 1325), 599: (1002, 1327)}

x_ranges = get_ranges()
def square(x, y):
	return fast_get(x, y) == 1 and fast_get(x+100, y) == 1 and fast_get(x, y+100) == 1 and fast_get(x+100, y+100) == 1

for x in range(50, 499):
	for y in range(0, 1000):
		s = square(x, y)
		if s: print(x, y)

