from collections import defaultdict
import functools
import operator

intext = "D2FE28"
intext = "38006F45291200"
intext = "8A004A801A8002F478" #16
intext = "620080001611562C8802118E34" #12
intext = "EE00D40C823060"
intext = "C0015000016115A2E0802F182340" # 23
intext = "C200B40A82" # --> 3
intext = "04005AC33890" # --> 54
intext = "880086C3E88112" # --> 7
intext = "CE00C43D881120" # --> 9
intext = "D8005AC2A8F0" # --> 1
intext = "9C0141080250320F1802104A08" # --> 1
intext = "F600BC2D8F" # --> 0
intext = "9C005AC2F8F0" # --> 0
intext

# Part 1

def hextobin(h):
  return bin(int(h, 16))[2:].zfill(len(h) * 4)

def decode_packet(bits):
  version, type_id  = int(bits[0:3],2), int(bits[3:6],2)
  if type_id == 4:
    i = 6
    num = []
    while(bits[i] == '1'):
      num.append(bits[i+1:i+5])
      i += 5
    num.append(bits[i+1:i+5])
    val = int(''.join(num), 2)
    return ((version, 'LITERAL', val), i+5)
  else:
    ltid = int(bits[6],2)
    num_subp = 10000000
    num_subp_bits = 10000000
    base_bits_consumed = 7
    sub_bits_consumed = 0
    sub = []
    if ltid:
      num_subp = int(bits[7:18], 2)
      base_bits_consumed += 11
    else:
      num_subp_bits = int(bits[7:22],2)
      base_bits_consumed += 15 
    while len(sub) < num_subp and sub_bits_consumed < num_subp_bits:
      inst, consumed = decode_packet(bits[base_bits_consumed + sub_bits_consumed:])
      sub.append(inst)
      sub_bits_consumed += consumed
    
    return (version, type_id, sub), base_bits_consumed+sub_bits_consumed

def sum_ids(tree):
  tot = tree[0]
  if type(tree[2]) is not list:
    return tot
  for node in tree[2]:
    tot += sum_ids(node)
  return tot

# p, bits = decode_packet(hextobin(intext))

### Part 2

# intext = "C200B40A82" # --> 3
# intext = "04005AC33890" # --> 54
# intext = "880086C3E88112" # --> 7
# intext = "CE00C43D881120" # --> 9
intext = "D8005AC2A8F0" # --> 1
# intext = "F600BC2D8F" # --> 0
# intext = "9C005AC2F8F0" # --> 0
# intext = "9C0141080250320F1802104A08" # --> 1
intext

def apply(tree): 
  def op(opcode):
    if opcode == 0:
      return operator.add
    elif opcode == 1:
      return operator.mul
    elif opcode == 2:
      return lambda a, b: b if a > b else a
    elif opcode == 3:
      return lambda a, b: a if a > b else b
    elif opcode == 5:
      return lambda a, b: 1 if a > b else 0
    elif opcode == 6:
      return lambda a, b: 0 if a >= b else 1
    elif opcode == 7:
      return lambda a, b: 1 if a == b else 0
  if type(tree[2]) is not list:
    return tree[2]
  nodes = map(apply, tree[2])
  tot = functools.reduce(op(tree[1]), nodes)
  return tot

p, bits = decode_packet(hextobin(intext))
# p=(6, 6, [(5, 'LITERAL', 15), (2, 'LITERAL', 15)])
tot = apply(p)
print(p)
print(tot)